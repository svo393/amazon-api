datasource postgresql {
  provider = "postgresql"
  url = "***"
}

generator client {
  provider = "prisma-client-js"
}

model Item {
  id               String     @id
  name             String
  price            Int
  shortDescription String
  longDescription  String
  stock            Int
  stars            Int        @default(0)
  media            Int
  primaryMedia     Int
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  isAvailable      Boolean    @default(true)
  ratings          Rating[]
  questions        Question[]
  user             User       @relation(fields: [userID], references: [id])
  userID           String
  category         Category   @relation(fields: [categoryName], references: [name])
  categoryName     String
  vendor           Vendor     @relation(fields: [vendorName], references: [name])
  vendorName       String
  cartItems        CartItem[]
}

model Category {
  id       String     @default(cuid()) @id
  name     String     @unique
  parent   Category?  @relation("CategoryToCategory", fields: [parentID], references: [id])
  parentID String?
  items    Item[]
  children Category[] @relation("CategoryToCategory")
}

model Vendor {
  id    String @default(cuid()) @id
  name  String @unique
  items Item[]
}

model User {
  id               String          @default(cuid()) @id
  name             String?
  email            String          @unique
  password         String
  avatar           Boolean         @default(false)
  createdAt        DateTime        @default(now())
  resetToken       String?         @unique
  resetTokenExpiry String?
  role             Role            @default(CUSTOMER)
  cart             CartItem[]
  items            Item[]
  orders           Order[]
  orderItems       OrderItem[]
  ratings          Rating[]
  ratingComments   RatingComment[]
  questions        Question[]
  answers          Answer[]
  answerComments   AnswerComment[]
}

model CartItem {
  id     String @default(cuid()) @id
  qty    Int
  item   Item   @relation(fields: [itemID], references: [id])
  itemID String
  user   User   @relation(fields: [userID], references: [id])
  userID String
}

model Order {
  id         String      @id
  total      Int
  charge     String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  status     OrderStatus @default(NEW)
  orderItems OrderItem[]
  user       User        @relation(fields: [userID], references: [id])
  userID     String
}

model OrderItem {
  id           String @default(cuid()) @id
  name         String
  primaryMedia Int
  price        Int
  qty          Int
  itemID       String
  user         User   @relation(fields: [userID], references: [id])
  userID       String
  order        Order  @relation(fields: [orderID], references: [id])
  orderID      String
}

model Rating {
  id         String          @default(cuid()) @id
  stars      Int
  title      String?
  review     String?
  media      Int?
  likes      Int             @default(0)
  dislikes   Int             @default(0)
  isVerified Int
  createdAt  DateTime        @default(now())
  comments   RatingComment[]
  user       User            @relation(fields: [userID], references: [id])
  userID     String
  item       Item            @relation(fields: [itemID], references: [id])
  itemID     String
}

model RatingComment {
  id        String   @default(cuid()) @id
  text      String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userID], references: [id])
  userID    String
  rating    Rating   @relation(fields: [ratingID], references: [id])
  ratingID  String
}

model Question {
  id        String   @default(cuid()) @id
  name      String
  votes     Int      @default(0)
  createdAt DateTime @default(now())
  answers   Answer[]
  item      Item     @relation(fields: [itemID], references: [id])
  itemID    String
  User      User    @relation(fields: [userID], references: [id])
  userID    String
}

model Answer {
  id         String          @default(cuid()) @id
  text       String
  likes      Int             @default(0)
  dislikes   Int             @default(0)
  createdAt  DateTime        @default(now())
  comments   AnswerComment[]
  question   Question        @relation(fields: [questionID], references: [id])
  questionID String
  user       User            @relation(fields: [userID], references: [id])
  userID     String
}

model AnswerComment {
  id        String   @default(cuid()) @id
  text      String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userID], references: [id])
  userID    String
  answer    Answer   @relation(fields: [answerID], references: [id])
  answerID  String
}

enum Role {
  ROOT
  ADMIN
  CUSTOMER
}

enum OrderStatus {
  DONE
  PROCESSING
  NEW
  CANCELED
}
